generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(ANALYST)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  alerts    Alert[]
  cases     Case[]
}

model Transaction {
  id              String   @id @default(cuid())
  amount          Float
  currency        String   @default("USD")
  merchantId      String
  merchantName    String?
  customerId      String
  customerEmail   String?
  timestamp       DateTime @default(now())
  location        String?
  ipAddress       String?
  deviceId        String?
  fraudScore      Float?
  riskLevel       RiskLevel @default(LOW)
  isBlocked       Boolean  @default(false)
  isFraud         Boolean?
  createdAt       DateTime @default(now())
  
  // Relations
  alerts Alert[]
  cases  Case[]
}

model Alert {
  id           String      @id @default(cuid())
  type         AlertType
  severity     Severity
  title        String
  description  String
  status       AlertStatus @default(OPEN)
  createdAt    DateTime    @default(now())
  resolvedAt   DateTime?
  
  // Relations
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  assignedTo    User?       @relation(fields: [assignedToId], references: [id])
  assignedToId  String?
  case          Case?       @relation(fields: [caseId], references: [id])
  caseId        String?
}

model Case {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      CaseStatus @default(OPEN)
  priority    Priority   @default(MEDIUM)
  createdAt   DateTime   @default(now())
  closedAt    DateTime?
  
  // Relations
  assignedTo    User          @relation(fields: [assignedToId], references: [id])
  assignedToId  String
  alerts        Alert[]
  transactions  Transaction[]
}

enum Role {
  ADMIN
  ANALYST
  INVESTIGATOR
}

enum AlertType {
  HIGH_AMOUNT
  UNUSUAL_LOCATION
  VELOCITY_CHECK
  BLACKLIST_MATCH
  ML_PREDICTION
  SUSPICIOUS_PATTERN
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  FALSE_POSITIVE
}

enum CaseStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  ESCALATED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
